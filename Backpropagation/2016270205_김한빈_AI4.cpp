#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <ctime>
#include <cstdlib>

#define INPUT_NUM 15*15
#define HIDDEN_NUM 40
#define OUTPUT_NUM 10
#define CASES_NUM 10
#define TOTAL_EPOCH 300001
#define LEARNING_RATE 0.5
using namespace std;

int main() {
	double input_layer[CASES_NUM][INPUT_NUM] = {
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },

	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
	 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
	 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
	 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
	 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
	 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
	 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
	 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
	 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
	 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
	 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
	 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
	 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },

	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },

	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },

	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0 },

	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },

	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },

	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },

	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },

	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	};
	double input_hidden_weight[HIDDEN_NUM][INPUT_NUM + 1];

	double hidden_in[HIDDEN_NUM];
	double hidden_layer[HIDDEN_NUM];
	double hidden_output_weight[OUTPUT_NUM][HIDDEN_NUM + 1];
	double delta_hidden_weight[HIDDEN_NUM + 1];
	double detal_in[HIDDEN_NUM];

	double output_in[OUTPUT_NUM];
	double output_layer[OUTPUT_NUM];
	int target[CASES_NUM][OUTPUT_NUM] = {
	{1},
	{0,1},
	{0,0,1},
	{0,0,0,1},
	{0,0,0,0,1},
	{0,0,0,0,0,1},
	{0,0,0,0,0,0,1},
	{0,0,0,0,0,0,0,1},
	{0,0,0,0,0,0,0,0,1},
	{0,0,0,0,0,0,0,0,0,1} };

	double delta, hidden_delta, input_delta, sigmoid;
	int i, j, k, epoch, current_case;

	srand(time(NULL));

	for (i = 0; i < HIDDEN_NUM; i++) {
		for (j = 0; j <= INPUT_NUM; j++)
			input_hidden_weight[i][j] = ((double)rand()) / RAND_MAX - 0.5;
	}

	for (i = 0; i < OUTPUT_NUM; i++) {
		for (j = 0; j <= HIDDEN_NUM; j++)
			hidden_output_weight[i][j] = ((double)rand()) / RAND_MAX - 0.5;
	}

	for (epoch = 0; epoch < TOTAL_EPOCH; epoch++) {
		if (!(epoch % 1000))
			cout << "\nEpoch : " << epoch << endl;
		for (current_case = 0; current_case < CASES_NUM; current_case++) {
			for (i = 0; i < HIDDEN_NUM; i++) {
				hidden_in[i] = input_hidden_weight[i][0];
				for (j = 1; j <= INPUT_NUM; j++) {
					hidden_in[i] += input_hidden_weight[i][j] * input_layer[current_case][j - 1];
				}
				hidden_layer[i] = 1 / (1 + pow(M_E, -hidden_in[i]));
			}

			for (i = 0; i < OUTPUT_NUM; i++) {
				output_in[i] = hidden_output_weight[i][0];
				for (j = 1; j <= HIDDEN_NUM; j++) {
					output_in[i] += hidden_output_weight[i][j] * hidden_layer[j - 1];
				}
				sigmoid = 1 / (1 + pow(M_E, -output_in[i]));
				output_layer[i] = sigmoid;
				delta = (target[current_case][i] - output_layer[i])*sigmoid*(1 - sigmoid);

				delta_hidden_weight[0] = LEARNING_RATE * delta;
				hidden_output_weight[i][0] += delta_hidden_weight[0];
				for (j = 0; j < HIDDEN_NUM; j++) {
					delta_hidden_weight[j + 1] = LEARNING_RATE * delta*hidden_layer[j];

					detal_in[j] = delta * hidden_output_weight[i][j + 1];
					hidden_delta = detal_in[j] * hidden_layer[j] * (1 - hidden_layer[j]);
					input_delta = LEARNING_RATE * hidden_delta;
					input_hidden_weight[j][0] += input_delta;
					for (k = 0; k < INPUT_NUM; k++) {
						input_delta = LEARNING_RATE * hidden_delta*input_layer[current_case][k];
						input_hidden_weight[j][k + 1] += input_delta;
					}
					hidden_output_weight[i][j + 1] += delta_hidden_weight[j + 1];
				}

			}
			if (!(epoch % 1000)) {
				cout << "Case " << current_case << " : ";
				for (i = 0; i < OUTPUT_NUM; i++) {
					cout.width(12);
					cout<< output_layer[i] << " ";
				}
				cout << endl;
			}
		}
	}
	return 0;
}